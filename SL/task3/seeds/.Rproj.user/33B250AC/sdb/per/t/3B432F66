{
    "contents" : "---\ntitle: \"seeds\"\nauthor: \"Karim Amanov\"\ndate: \"8 января 2015 г.\"\noutput: html_document\n---\n\nЗагружаем данные\n```{r}\nseeds <- read.table(\"seeds_dataset.txt\")\nnames(seeds) <- c(\"Area\", \"Perimeter\", \"Compactness\", \"KernelLength\", \"KernelWidth\", \"Asymmetry\", \"GrooveLength\", \"Variety\")\n```\n\nПосмотрим на корреляцию всех компонентов\n```{r}\nlibrary(corrplot)\ncorrplot(cor(seeds))\n```\n\nВидим наличие сильной корреляции между различными признаками. Также из описания данных мы знаем что Compactness выражается через Perimeter и Area, поэтому можно будет попробовать убрать этот признак.\n\nЕще больше графиков!\n\n```{r}\nlibrary(lattice)\nlibrary(latticeExtra)\nmarginal.plot(seeds)\nseeds$Variety <- factor(seeds$Variety, labels = c(\"Kama\",\"Rosa\", \"Canadian\"))\nmarginal.plot(seeds[,-8], data = seeds, groups = Variety,auto.key = list(lines = TRUE, title =\"Variety\",cex.title = 1, columns = 3))\n\n```\n\nНа этих графиках мы можем видеть какие признаки лучше отделяют сорта.Воспользуемся этим когда будем строить модели.\n\nПодготовим данные и приступим к построению моделей\n\n```{r}\nlibrary(MASS)\nlibrary(e1071)\nlibrary(nnet)\ntrain.idx <- sample(nrow(seeds), size = nrow(seeds) * 0.66)\nseeds.train <- seeds[train.idx, ]\nseeds.test <- seeds[-train.idx, ]\n```\n\n**метод LDA**\n\n```{r}\nbuild_and_test_lda <- function(formula) {\n  model <- lda(formula , data = seeds.train)\n  print(model)\n\n  print(tune(lda, formula, data = seeds, predict.func = function(...) predict(...)$class, tunecontrol = tune.control(sampling = \"cross\",cross = 10)))\n  \n  my.predicted <- predict(model, seeds.test)\n  print(table(predicted = my.predicted$class, actual = seeds.test$Variety))\n  print(mean(my.predicted$class != seeds.test$Variety))\n}\n\nbuild_and_test_lda(Variety ~ .)\n```\n\nПробуем убрать Compactness\n```{r}\nbuild_and_test_lda(Variety ~ . - Compactness)\n```\n\nПосмотрим на коэффициенты. Есть идея оставить только KernelLength и GrooveLength\n```{r}\nbuild_and_test_lda(Variety ~ KernelLength + GrooveLength)\n```\n\nПолучилось довольно неплохо, с учетом того что и модель стала проще. Далее я пробовал перебирать все возможные признаки, но особых улчушений не было. Поэтому остановимся на этой модели.\n\n\n**метод naive bayes**\n\n```{r}\nbuild_and_test_bayes <- function(formula) {\n  model <- naiveBayes(formula , data = seeds.train)\n  print(model)\n\n  print(tune(naiveBayes, formula, data = seeds, predict.func = function(...) predict(...), tunecontrol = tune.control(sampling = \"cross\",cross = 10)))\n  \n  my.predicted <- predict(model, seeds.test)\n  print(table(predicted = my.predicted, actual = seeds.test$Variety))\n  print(mean(my.predicted != seeds.test$Variety))\n}\n\nbuild_and_test_bayes(Variety ~ .)\nbuild_and_test_bayes(Variety ~ . - Compactness)\nbuild_and_test_bayes(Variety ~ KernelLength + GrooveLength)\n```\nnaive bayes никаких улучшений не дал\n\n**метод multinomial regression**\n\n```{r}\nbuild_and_test_multinom <- function(formula) {\n  model <- multinom(formula , data = seeds.train, trace = FALSE, maxit = 4000)\n  print(model)\n\n  print(tune(multinom, formula, data = seeds, trace = FALSE, maxit = 4000, predict.func = function(...) predict(...), tunecontrol = tune.control(sampling = \"cross\",cross = 10)))\n  \n  my.predicted <- predict(model, seeds.test)\n  print(table(predicted = my.predicted, actual = seeds.test$Variety))\n  print(mean(my.predicted != seeds.test$Variety))\n  return (model)\n}\nmr1 <- build_and_test_multinom(Variety ~ .)\nmr2 <- build_and_test_multinom(Variety ~ . - Compactness)\nmr3 <- build_and_test_multinom(Variety ~ KernelLength + GrooveLength)\n```\n\nА теперь посмотрим, что нам сможет предложить AIC\n```{r}\nmr1.aic.formula <- as.formula(stepAIC(mr1))\nm <- build_and_test_multinom(mr1.aic.formula)\n```\nНичего особо не улучшили.Остановимся на последней lda модели.\n\n",
    "created" : 1420725696145.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3719008299",
    "id" : "3B432F66",
    "lastKnownWriteTime" : 1420744027,
    "path" : "~/Spbau/SL/task3/seeds/seeds_report_amanov.Rmd",
    "project_path" : "seeds_report_amanov.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}